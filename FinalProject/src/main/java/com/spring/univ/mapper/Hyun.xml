<?xml version="1.0" encoding="UTF-8"?>

<!-- ====  mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ====  루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="Hyun">
	
<!-- ================================================================================================ -->
<!-- ========================= *************** QnA(문의게시판) *************** ========================= -->
	<!-- 글쓰기 -->
	<insert id="QnAAdd" parameterType="com.spring.univ.model.QnAVO">
		<if test='fk_seq.equals("")'>
			insert into tbl_QnA(seq, fk_hakbun, fk_code, name, subject, content, readCount, regDate, status, groupno, fk_seq, depthno)
			values(QnASeq.nextval, #{fk_hakbun}, #{fk_code}, #{name}, #{subject}, #{content}, default, default, default, #{groupno}, default, default)
		</if>
      
		<if test='!fk_seq.equals("")'>
			insert into tbl_QnA(seq, fk_hakbun, fk_code, name, subject, content, readCount, regDate, status, groupno, fk_seq, depthno)
			values(QnASeq.nextval, #{fk_hakbun}, #{fk_code}, #{name}, #{subject}, #{content}, default, default, default, #{groupno}, #{fk_seq}, to_number(#{depthno})+1)
		</if>
	</insert>
	
	<!-- tbl_QnA 테이블에서 groupno 컬럼의 최대값 알아오기 -->
	<select id="getQnAGroupnoMax" resultType="int">
		select NVL(max(groupno), 0)
		from tbl_QnA
	</select>
	
	
	<!-- 글 1개 조회 -->         
	<select id="getQnAView" parameterType="HashMap" resultType="com.spring.univ.model.QnAVO">
      select previousseq, previoussubject, 
             seq, fk_hakbun, fk_code, name, subject, content, readCount, regDate, 
             nextseq, nextsubject, groupno, fk_seq, depthno
      from
      (
          select lag(seq, 1) over(order by seq desc) AS previousseq
               , lag(subject, 1) over(order by seq desc) AS previoussubject
               
               , seq, fk_hakbun, fk_code, name, subject, content, readCount
               , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
               
               , lead(seq, 1) over(order by seq desc) as nextseq
               , lead(subject, 1) over(order by seq desc) as nextsubject
               
               , groupno, fk_seq, depthno
          from tbl_QnA
          where status = 1 and fk_code = #{fk_code}
		  <if test='searchType != "" and searchWord != ""'>
          and lower( ${searchType} ) like '%' || lower( #{searchWord} ) || '%'
          </if>
      ) V
      where seq = #{seq}
   </select>
   
	
	<!-- 조회수 1 증가 -->
	<update id="setQnAAddReadCount" parameterType="String">
		update tbl_QnA set readCount = readCount + 1 
		where seq = #{seq} 
	</update>
	
	<!-- 글 수정 -->
	<update id="QnAEdit" parameterType="com.spring.univ.model.QnAVO">
		update tbl_QnA set subject = #{subject}, content = #{content}
		where seq = #{seq} and fk_code = #{fk_code}
	</update>


    <!-- 글 삭제-->
    <delete id="QnADel" parameterType="HashMap">
    	delete from tbl_QnA 
        where seq = #{seq} and fk_code = #{fk_code}
    </delete>
    
    <!-- 검색어 입력시 자동글 완성 -->
	<select id="QnAWordSearchShow" parameterType="HashMap" resultType="String"> 
	    <choose>
	        <when test="searchType eq 'name'">
	    	    select distinct ${searchType}    
	        </when>
	        <otherwise>
	            select ${searchType} 
	        </otherwise>
	    </choose>
	    from tbl_QnA
	    where status = 1 and fk_code = #{fk_code}
	    and lower( ${searchType} ) like '%'|| lower( #{searchWord} ) ||'%'
	    <if test="searchType neq 'name'">
	    	order by seq desc
	    </if>
	</select>
	

    <!-- 총 게시물 건수(totalCount) 구하기 - 검색이 있을때와 검색이 없을때로 나뉜다. -->
    <select id="getQnATotalCount" parameterType="HashMap" resultType="int" >
         select count(*)
	     from tbl_QnA 
		 where status = 1
		 and fk_code = #{fk_code}
		 <if test='searchWord != ""'>  
		 and lower(${searchType}) like '%'||lower(#{searchWord})||'%'
		 </if> 
    </select>
	
	<!-- 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한것) 답글포함 -->
	<select id="QnASearchWithPaging" parameterType="HashMap" resultType="com.spring.univ.model.QnAVO"> 
		select seq, fk_hakbun, fk_code, name, subject, readCount, regDate, groupno, fk_seq, depthno
		from 
		(
			select rownum as rno
				 , seq, fk_hakbun, fk_code, name, subject, readCount, regDate
				 , groupno, fk_seq, depthno
			from
			(
				select seq, fk_hakbun, fk_code, name, subject
					 , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
					 , groupno, fk_seq, depthno
				from tbl_QnA 
				where status = 1 and fk_code = #{fk_code}
				<if test='searchType != "" and searchWord != ""'>
				and lower( ${searchType} ) like '%'|| lower( #{searchWord} ) ||'%'
				</if>
				start with fk_seq = 0 
				connect by prior seq = fk_seq    
				order siblings by groupno desc, seq asc
			) V
		) T
		where rno between #{startRno} and #{endRno}
		
	</select>
<!-- ======================== *************** QnA(문의게시판) 끝 *************** ======================== -->
<!-- ================================================================================================ -->








<!-- ================================================================================================ -->
<!-- ======================= *************** Notice(공지사항) *************** ========================= -->
	<!-- 글쓰기(파일첨부가 없는 글쓰기) -->
	<insert id="noticeAdd" parameterType="com.spring.univ.model.NoticeVO">
		insert into tbl_notice(seq, fk_hakbun, fk_code, name, subject, content, readCount, regDate, status)
		values(noticeSeq.nextval, #{fk_hakbun}, #{fk_code}, #{name}, #{subject}, #{content}, default, default, default)
	</insert>

	
	<!-- 글1개 조회 -->
	<select id="getNoticeView" parameterType="HashMap" resultType="com.spring.univ.model.NoticeVO">
		select previousseq, previoussubject, 
		       seq, fk_hakbun, name, subject, content, readCount, regDate, nextseq, nextsubject, fk_code 
		from 
		(
		    select   lag(seq, 1) over(order by seq desc) AS previousseq
		           , lag(subject, 1) over(order by seq desc) AS previoussubject		           
		           , seq, fk_hakbun, name, subject, content, readCount
		           , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate		    
		           , lead(seq, 1) over(order by seq desc) AS nextseq
		           , lead(subject, 1) over(order by seq desc) AS nextsubject
		           , fk_code 		        
		    from tbl_Notice
		    where status = 1
		    and fk_code = #{fk_code}
		    <if test='searchType != "" and searchWord != ""'>
		    and lower(${searchType}) like '%'||lower(#{searchWord}) ||'%'
		    </if>
		) V 
		where V.seq = #{seq}
	</select>
	
	
	<!-- 글조회수 1증가 -->
	<update id="setNoticeAddReadCount" parameterType="String">
		update tbl_Notice set readCount = readCount + 1 
		where seq = #{seq}
	</update>
	
	
	<!-- 글 수정 -->
    <update id="noticeEdit" parameterType="com.spring.univ.model.NoticeVO">
        update tbl_Notice set subject = #{subject}
                               , content = #{content}
        where seq = #{seq}
    </update>


    <!-- 글 삭제 -->
    <delete id="noticeDel" parameterType="HashMap">
    	delete from tbl_Notice
        where seq = #{seq}
    </delete>
    
    
    <!-- 검색어 입력시 자동글 완성하기  -->
	<select id="noticeWordSearchShow" parameterType="HashMap" resultType="String"> 
	    <choose>
	        <when test="searchType eq 'name'">
	    	    select distinct ${searchType}    
	        </when>
	        <otherwise>
	            select ${searchType} 
	        </otherwise>
	    </choose>
	    from tbl_Notice
	    where status = 1 
	    and lower( ${searchType} ) like '%'|| lower( #{searchWord} ) ||'%'
	    <if test="searchType neq 'name'">
	    	order by seq desc
	    </if>
	</select>
	

    <!-- 총 게시물 건수(totalCount) 구하기 - 검색이 있을때와 검색이 없을때로 나뉜다. -->
    <select id="getNoticeTotalCount" parameterType="HashMap" resultType="int" >
         select count(*)
	     from tbl_notice
		 where status = 1
		 and fk_code = #{fk_code}
		 <if test='searchWord != ""'>  
		 and lower(${searchType}) like '%'||lower(#{searchWord})||'%'
		 </if> 
    </select>
	
    <!-- 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한것) 답글포함 -->
    <select id="noticeListSearchWithPaging" parameterType="HashMap" resultType="com.spring.univ.model.NoticeVO"> 
    select seq, fk_hakbun, name, subject, readCount, regDate, fk_code 
	from 
	(
	    select row_number() over(order by seq desc) AS rno
	         , seq, fk_hakbun, name, subject
	         , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
	         , fk_code
	    from tbl_Notice 
	    where status = 1
	    and fk_code = #{fk_code}
	    <if test='searchType != "" and searchWord != ""'>
	    and lower( ${searchType} ) like '%'|| lower( #{searchWord} ) ||'%'
	    </if>
	) V
	where rno between #{startRno} and #{endRno}
    </select>
<!-- ======================= *************** Notice(공지사항) 끝 *************** ======================= -->
<!-- ================================================================================================ -->

	
<!-- ================================================================================================ -->
<!-- ======================= *************** Calendar(일정) *************** ========================= -->
	<select id="getCalendar" parameterType="HashMap" resultType="com.spring.univ.model.CalendarVO">
		select seq, title,
			   to_char(startDate, 'yyyy-mm-dd hh24:mi:ss') as startDate,
			   to_char(endDate, 'yyyy-mm-dd hh24:mi:ss') as endDate
		from tbl_calendar
		where fk_hakbun = #{fk_hakbun}
	</select>
	
	<insert id="calendarAdd" parameterType="com.spring.univ.model.CalendarVO">
		insert into tbl_calendar(seq, fk_hakbun, title, detail, startDate, endDate)
		values(calendarSeq.nextval, #{fk_hakbun}, #{title}, #{detail}, to_date(#{startDate}, 'yyyy-mm-dd hh24:mi:ss'), to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss'))
	</insert>
<!-- ======================= *************** Calendar(일정) 끝 *************** ========================= -->
<!-- ================================================================================================ -->
	
	
	
	
	
	
</mapper>








